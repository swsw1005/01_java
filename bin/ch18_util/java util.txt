              Collection  
        ┌--------------------┐     
        │                    │
        │                    │
        Set                 List                    Map
    ┌-----------┐           ┌-------┐           ┌----------┐ 
    │           │           │       │           │          │
    │           │           │       │           │          │
HashSet     SortedSet   ArrayList   Vector   HashMap    Hashtable
                                                            │
                                                            │
                                                        Properties


Hashtable : 검색이 빠르다 (검색이 용이하다 )

HashMap 도 Hashtable 비슷하다

key     value
"id"    "kim"
"pwd"   "kim123"
 

Hashtable 의 메서드

  Object put(Object key, Object value) : 해쉬 테이블에 저장
  Object get(Object key) : 해쉬테이블로부터 값을 얻는다
  Object remove(OBject key) : 해쉬테이블 값을 제거
  int size() :  해쉬 테이블 key 갯수를 구한다



StringTokenizer    문자열 파싱

  nextToken()    다음 토큰 반환 String
  hasMoreTokens() nextToken()한 뒤에 token 남아있는지 확인 boolean
  countToken()   전체 토큰수 int 반환
 
11. Generic : 이 기능은 Collection 같은 자료구조에 객체를 넣거나 꺼낼때 형변환을

                    잘못했을 때 ClassCastException 컴파일시 찾아내기 위한 기능

   

제너릭 타입 <>사이에 컴파일 당시 사용될 객체자료형만 선언 해주면
객체를 저장할 때 선언된 제너릭 타입으로만 저장된다

12.   Enhanced Loop ( for 문)

13.   Autoboxing (오토박싱)  예 : Integer a=10;

14.   Unboxing (언박싱)

15.   Typesafe Enumeration : C/C++ 에서 enum 기능이다

16.   static import

       예 : import static java.lang.System.out;       

17.   향상된 입력기능 : java.util.Scanner 클래스를 새로 제공하여 ,
                     입력 기능을 간소화 시켰다

18.  포맷을 이용한 출력 : C 에서 사용하던 printf() 함수의 %d %f %s 와 같은 출력물에 대한 형식 지정
            System.out.printf() 를 지원 한다

19.  Varages : 여러개의 인수를 처리할때 유용하다

20. Collection 자료들
    Vector, List , ArrayList, Set,HashSet, Collection , Iterator ,
    Hashtable , Stack, LinkedList
    Map, HashMap

===============================

11.  Generic :  Collection 같은 자료구조에 객체를 넣거나 꺼낼때 
         형변환을 잘못했을끼 ClassCastException 을 컴파일시 찾아내기 위한 기능

제너릭 타입 <>사이에 컴파일 당시 사용될 객체자료형만 선언 해주면
객체를 저장할 때 건언된 제너릭 타입으로만 저장된다

API에서는 전달되는 객체가 현재 객체 내에서 하나의 자료형(Type)으로 쓰일때는<T>로
전달되는 객체가 현재 객체네에서 하나의 요소(Element)로 자리잠을때는 <E> 로

전달되는 객체가 현재 객체내에서 Key 값으로 사용될때는 <K>로 ,
전달되는 객체가 현재 객체 내에서 Value 값으로 사용될때는 <V> 로 표현된다


실습

12.  Enhanced Loop ( for 문)

Enhanced Loop ( for 문) 는 Collection 이나 배열 과 군집 데이터를 보유하는 객체이서

데이터를 꺼낼때 간단하기 위해서 사용한다

 

형식---------------------------

for(파리미터:콜렉션변수명)

{      

}

-----------------------------

Arrays 클래스

java.util.Arrays 클래스는 배열을 조작하기 위해 여러가지 클래스 메서드가 제공된다

 

메서드

equals()  : 두 배열을 비교 할때 사용
sort() : 배열 정렬
fill()   : 배열 요소값을을 채운다
 

13.   Autoboxing (오토박싱)

  이전에는
   int a=10;
   Integer A=new Integer(a);

   오토박싱은
   int a=10;//기본자료형
   Integer A=a;  // 이때 stack 영역에 있던 값이 heap 영역에 저장
   Integer A=10;

14.   Unboxing (언박싱)

    이전에는
   Integer A=new Integer(20);
   int a=A.intValue();

언박싱은
Integer A=new Integer(20);
int a=A; // heap 영역에 존재한 레퍼런스형 객체가 가진 값이 stack 영역에 복사되는데 이름 Unboxing 이라한다

 

 

15.   Typesafe Enumeration : C/C++ 에서 enum 기능이다
   Typesafe Enumeration 는 enum 상수를 표현할 때 사용
특정 그룹에 대한 상태값을 정수로 표현 하고자 할때 사용
클래스를 사용해서 표현 했었다

public class MainMenu
{  public static final int MENU_FILE=0;

   public static final int MENU_EDIT=1;
   public static final int MENU_FORMAT=2;
   public static final int MENU_VIEWE=3;
}

이 경우는 자료형에 문제가 있다 ,
 MENU_FILE 을 화면에 디버그용 메시지를 출력하고 싶어도
그 값이 0 으로 출려되니 실제로 의미 있는 값을 보는 것은 한계가 있다

javaSE5 이후에는
다음과 같이 간단한 형식으로 변환이 가능해 졌다
public enum MainMeu{FILE,EDIT,FORMAT,VIEW};
                     0     1    2      3

 이 경우는 C언어의 enum 에서 빌려온 개념이다

16.  static import

       예 : import static java.lang.System.out;       
             import static java.lang.Math.PI;

17.  향상된 입력기능 : java.util.Scanner
                java.util.Scanner 클래스를 새로 제공하여,입력 기능을 간소화 시켰다

18. 포맷을 이용한 출력 :
         C 에서 사용하던 printf() 함수의 %d %f %5.1f %s 와 같은 출력물에 대한 형식 지정
          System.out.printf() 를 지원 한다

19.  Varages :
   여러개의 인수를 처리할때 유용하다
   인자로 여러개의 문자열을 넘겨야 하지만
   인수의 개수가 변경된다면 처리하기가 어려운데
   이때 Varages  사용 된다

20. 컬렉션 클래스와 제너릭

   Collection 자료들

   Collection , Iterator , Set, HashSet 
    Vector, List , ArrayList, Hashtable ,  Map, HashMap
   Stack, LinkedList

데이터를 효율적으로 사용하기 위해서 자료구조가 사용된다

자주 사용되는 자료구조 로는  배열, 리스트 , 스택 , 큐 , 해쉬테이블 등이 있다
자바에서는 이러한 다양한 자료구조를 컬렉션 클래스로 제공하고 있음
자바 컬렉션 클래스는 Collection 인터페이스로 부터 구현된다

다음은 Collection 인터 페이스의 주요 메서드 이다

 

 

int size() ===> 요소 갯수 반환
boolean isEmpty() ===> 컬렉션이 비어 있는가
boolean add(Object ob) ===> 요소 추가 성공 했을시 true 리턴
boolean remove(Object ob) ===> 요소 삭제 ,  성공 하면 true 반환
boolean removeAll( Collection co) ===> 요소 전체 삭제
boolean contains(Object ob) ===> 해당 객체가 컬렉션 클래스에 포함 되어 있으면 true 반환
Iterator iterator() ===> Iterator 인터페이스 객체를 얻는다
Object[] toArray() ===> 컬렉션에 들어 있는 요소를 객체 배열로 반환

Collection 인터페이스는 크게 Set,List 로 나뉘는데
Set 은 순서가 없는 집합으로 중복을 허용하지 않는다
List 는 순서가 있는 집합으로 중복을 허용한다

Iterator 인터페이스는 HashSet 에 저장된 요소를 하나씩 얻어내어 Collection 인터페이스에서 제공하는

iterator()메서드를 호출하여 Iterator 인터페이스 객체를 얻어낸다

데이터를 순서없이 담아 둔 형태이기 때문에 특정 위치의 데이터는 읽어 올 수 없다

Iterator 의 boolean hasNext() 메서드는 요소가 있으면 true 를 요소가 없으면 false 를반환 한다
 

List 인터페이스

List    데이터를 일렬로 늘어놓은 자료구조를 말한다

ArrayList, Vector, Stack, LinkedList 가 모두 List 인터페이스를 구현한 클래스이다

List 는 Set 과 달리 순차적으로 처리한다

list.add("냉면");      ==>0
list.add("쌈냉면");    ==>1
list.add("한솥");      ==>2
list.add("해물된장");  ==>3
list.add("제육볶음");  ==>4
list.add("쌈냉면");    ==>5
list.add("한솥");      ==>6

자바배열은 길이를 늘리거나 줄일 수 없다
하지만 ArrayList 는 요소가 가득 차게 되면 자동으로 저장 영역을 늘려준다

즉, ArrayList 는 가변 길이의 배열이라고 할수 있다

List 에 저장된 데이터를 가져오기 위해서는 get()메서드를사용하되
전달 인자로 데이터 위치를 지정해야한다
예를 들어 "해물된장" 얻고자 한다면 list.get(3) 으로 하면 된다

list.remove(3) : index 3인 항목 제거
list.add(int index, E element) => index 위치에 요소를 저장한다, 해당 객체의 요소는 뒤로 밀려난다
list.set(int index, E element) => index 위치의 요소를 대체한다

Iterator ,List , ArrayList

Enumeration 인터페이스

Enumeration 인터페이스는 hasMoreElements() 와 nextElement() 메서드를 가지고 있다

hasMoreElements()는 Collection 인터페이스로

구현한 클래스안에 있는 자료를 꺼낼수 있는 요소가 있으면 true 를 반환하고

없으면 false 를 반환 한다

 

 nextElement()는 Collection 인터페이스로 구현된 클래스에서 객체를 꺼내온다

 

 

stack

Stack은 배열처럼 한 개 이상의 데이터를 저장할 수 있는 기억 공간 이지만

데이터 저장하고 꺼내는 순서가 정해져 있다는 면에서 배열과 차이점이 있다

 

스택은 LIFO ( Last-In , First-out) 입출력 방식이다
 

Stack 메서드들

push(E item) : 스택 맨위에다 객체를 추가한다
empty() : 현재 스텍이 비어있는가를 확인 ( isEmpty() 와 동일)
pop()  : 스택 맨 위의 객체를 꺼낸다 ( 객체 제거 )
peek() :  스택 맨 위의 객체를 꺼낸다 ( 객체 제거 되지 않는다  )

LinkedList
큐는 스택과 같이 데이터를 넣고 꺼내는 순서가 제안된 자료구조이다
큐는 데이터를 FIFO(First-In , First-Out) 구조이다

LinkedList 클래스는 메서드 들

offer() : 데이터를저장
poll()  : 데이터를 꺼내올때 사용  (자료제거)
peek() : 데이터를 꺼내올때 사용 , 해당 요소는 지우지 않는다

Hashtable 과 제넉릭 실습

실습

LinkedList43.java

 

객체직렬화(Serializable)
1. 복잡한 객체 내용을 입력/출력 할때 사용
2. 패킷의 또 다른 방법론이다
3. 구체적인 멤버변수 내용을 자바 I/O 가 자동 적으로 바이트 단위로 변환 하여
   저장 복원 하거나 / 네트워크로 전송할 수 있는 기능을 제공한다
4. 객체 직렬화을 이용하면 객체내용을 자바 I/O 가 자동으로 바이트 단위로 변환하여
  저장이나 전송을 해주게 된다
  또한 이것은 자바에서 자동으로 처리해 주는 것이기 때문에
  운영 체제가 달라도 전혀 문제가 없다

5. Serailizable 인터페이스를 상속 받아서 구현 해야 한다
  Serailizable 인터페이스는 객체가 직렬화가 되어야 함을
  자바 가상머신(JVM)에게 알려 주는 역할만 하는 인터페이스 이다

6. 객체직렬화에서 제외 시키려면
   transient 키워드를 사용하여 객체 직렬화를 막을 수 있다

  예 )
    String name;
    transient int age; // 객체직렬화에서 제외
    double ki;

 