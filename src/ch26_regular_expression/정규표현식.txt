자바 문자열 객체(java.lang.String)에서 정규식을 사용하는 자주 쓰는 메소드는 다음과 같습니다.

- boolean matches(String regex)
  인자로 주어진 정규식에 매칭되는 값이 있는지 확인합니다.

- String replaceAll(String regex, String replacement)
  문자열내에 있는 정규식 regex와 매치되는 모든 문자열을 replacement문자열로 바꾼 문자열을 반환합니다.

- String[] split(String regex)
  인자로 주어진 정규식과 매치되는 문자열을 구분자로 분할합니다.



정규식을 전문적으로 다루는 객체도 제공됩니다. 
java.util.regex 패키지에 있는 다음 세가지 클래스들 입니다. 
주요한 차이점은 정규식을 Pattern 객체로 미리 컴파일 해둘수 있어서 처리 속도가 좀 더 빠르고, 
매칭된 데이터를 좀더 상세히 다룰 수 있습니다.

- Pattern 객체
  정규식의 컴파일된 표현 입니다(정규식을 적용 가능하도록 컴파일해서 가지고 있습니다).
  Pattern 클래스는 공개된 생성자를 제공하지 않습니다.
  패턴을 생성하려면 Pattern객체를 반환하는 정적 compile 메소드를 호출해야 합니다.
  이 메소드는 첫 번째 인자로 정규식 문자열을 받아 들입니다.

- Matcher 객체
  패턴을 해석하고 입력 문자열에 대해 일치 작업을 수행하는 엔진입니다.
  Pattern 클래스와 마찬가지로 Matcher는 어떤 공개된 생성자도 정의하고 있지 않습니다.
  Matcher객체는 Pattern 객체의 matcher 메소드를 호출해서 얻습니다.

- PatternSyntaxException 객체
  정규식 패턴의 문법 오류를 나타내는 unchecked 예외 입니다.



출처: https://offbyone.tistory.com/400 [쉬고 싶은 개발자]


1. 매칭될 문자를 지정하거나, 제외하는 방법입니다.



정규식	설명
[abc]	a, b, c중 하나이면 일치 합니다.
[^abc]	a, b, c를 제외한 다른 글자 이면 일치합니다.
[a-zA-Z]	a 부터 z까지의 소문자 알파벳 이거나 A 부터 Z까지의 대문자 알파벳 중의 하나라면 일치합니다.(범위)
[a-d[m-p]]	a 부터 d까지, 또는 m 부터 p까지 중에 하나와 일치합니다: [a-dm-p] (합집합)
[a-z&&[def]]	d, e, f 중의 하나와 일치합니다. (교집합)
[a-z&&[^bc]]	b와 c를 제외한 a 부터 z까지 중의 하나와 일치합니다: [ad-z] (차집합)
[a-z&&[^m-p]]	m부터 p 까지를 제외한, a 부터 z까지 중의 하나와 일치합니다: [a-lq-z] (차집합)


2. 미리 정의된 문자를 지정하는 방법입니다.



정규식	설명
.	임의의 문자 (라인 종결자와 일치할 수도 하지 않을 수도 있음)
\d	숫자 문자: [0-9]
\D	숫자 문자가 아닌것: [^0-9]
\s	화이트 스페이스 문자: [ \t\n\x0B\f\r]
\S	화이트 스페이스 문자가 아닌것: [^\s]
\w	알파벳 단어 문자(word 문자): [a-zA-Z_0-9]
\W	알파벳 단어 문자가 아닌것: [^\w]


3. 수량 매칭



패턴이 나오는 횟수를 지정할 수 있습니다.



Greedy	Reluctant	Possessive	의미
X?	X??	X?+	X가 없거나 한번 나옴
X*	X*?	X*+	X가 없거나 한번 이상 나옴
X+	X+?	X++	X가 한번 또는 여러번 나옴
X{n}	X{n}?	X{n}+	
X가 정확히 n번 나옴

X{n,}	X{n,}?	X{n,}+	X가 n번 이상 나옴
X{n,m}	X{n,m}?	X{n,m}+	X가 n이상 m이하로 나옴


수량매칭은 각각 세 가지 방법을 사용할 수 있는데 조금식 차이가 있습니다.


- Greedy : 매칭을 위해서 입력된 문자열 전체를 읽어서 확인하고 뒤에서 한자씩 빼면서 끝까지 확인합니다.
- Reluctant : 입력된 문자열에서 한글자씩 확인해 나갑니다. 마지막에 확인하는 것은 전체 문자열 입니다.


